import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class C206_CaseStudy {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in); // generated by chatgpt
		ArrayList<User> users = new ArrayList<>();
		ArrayList<School> schools = new ArrayList<>();

		while (true) {
			System.out.println("Welcome to the School Lunch Box Online Ordering System!");
			System.out.println("1. Login");
			System.out.println("2. Register");
			System.out.println("3. Exit");
			int choice = Helper.readInt("Please choose an option:");

			switch (choice) {
			case 1:
				login(users, schools);
				break;
			case 2:
				register(users);
				// Display the table of registered parents here
				displayRegisteredParents(users);
				break;
			case 3:
				System.out.println("Thank you for using our system. Goodbye!");
				scanner.close();
				System.exit(0);
				break;
			case 4:
				adminMenu(schools, users); // Pass the users list to the adminMenu
				break;
			default:
				System.out.println("Invalid option. Please try again.");
			}
		}
	}

	private static void login(List<User> users, List<School> schools) {
		String username = Helper.readString("Enter username:");
		String password = Helper.readString("Enter password:");

		User user = findUserByUsername(users, username);
		if (user != null && user.getPassword().equals(password)) {
			if (user instanceof Parent) {
				System.out.println("Welcome, Parent " + user.getFullName());
				// Call parent menu here
			} else if (user instanceof Vendor) {
				System.out.println("Welcome, Vendor " + user.getFullName());
				// Call vendor menu here
			} else if (user instanceof Admin) {
				System.out.println("Welcome, Admin " + user.getFullName());
				adminMenu(schools); // Call admin menu here
			}

		} else {
			System.out.println("Invalid username or password. Please try again.");
		}
	}

	public static void register(List<User> users) {
		String username = Helper.readString("Enter a username:");
		String password = Helper.readString("Enter a password:");
		String email = Helper.readString("Enter your email:");
		String fullName = Helper.readString("Enter your full name:");
		String phoneNo = Helper.readString("Enter your phone number:");
		String address = Helper.readString("Enter your address:");

		System.out.println("Choose a role:");
		System.out.println("1. Parent");
		System.out.println("2. Vendor");
		System.out.println("3. Admin");
		int roleChoice = Helper.readInt("Enter your choice:");

		if (roleChoice == 1) {
			List<Integer> childrenIds = new ArrayList<>();
			List<String> allergies = new ArrayList<>();
			String dietaryRestrictions = Helper.readString("Enter your dietary restrictions:");

			Parent parent = new Parent("", username, password, email, fullName, phoneNo, address, "Parent", childrenIds,
					new ArrayList<>(allergies), dietaryRestrictions);

			users.add(parent); // Add parent to your user database
			System.out.println("Parent registered successfully!");

		} else if (roleChoice == 2) {
			Vendor vendor = new Vendor("", username, password, email, fullName, phoneNo, address, "Vendor");
			users.add(vendor); // Add vendor to your user database
			System.out.println("Vendor registered successfully!");
		} else if (roleChoice == 3) {
			Admin admin = new Admin("adminID", username, password, email, fullName, phoneNo, address, "Admin");
			users.add(admin); // Add admin to your user database
			System.out.println("Admin registered successfully!");
		}
	}

	private static User findUserByUsername(List<User> users, String username) {
		for (User user : users) {
			if (user.getUsername().equals(username)) {
				return user;
			}
		}
		return null;
	}

	public static void displayRegisteredParents(List<User> users) {
	    System.out.println("--------------------------------------------------------------------------------------------");
	    System.out.printf("| %-10s | %-15s | %-15s | %-15s | %-20s |\n", "User ID", "Full Name", "Username", "Phone Number", "Dietary Restr.");
	    System.out.println("--------------------------------------------------------------------------------------------");

	    boolean noParents = true; // Flag to indicate if there are no parents to display

	    for (User user : users) {
	        if (user instanceof Parent) {
	            Parent parent = (Parent) user;
	            System.out.printf("| %-10s | %-15s | %-15s | %-15s | %-20s |\n",
	                    parent.getUserID(),
	                    parent.getFullName(),
	                    parent.getUsername(),
	                    parent.getPhoneNo(),
	                    parent.getDietaryRestrictions());

	            noParents = false; // Set the flag to false since we found at least one parent
	        }
	    }

	    if (noParents) {
	        // Print an empty row if there are no parents to display
	        System.out.println("|            |                 |               |                  |                        |");
	    }

	    System.out.println("--------------------------------------------------------------------------------------------");
	}







	private static void adminMenu(List<School> schools, List<User> users) {
		while (true) {
			System.out.println("Admin Menu:");
			System.out.println("1. Add School");
			System.out.println("2. View All Schools");
			System.out.println("3. Delete School");
			System.out.println("4. Delete Parent/Guardian");
			System.out.println("5. Logout");
			int choice = Helper.readInt("Please choose an option:");

			switch (choice) {
			case 1:
				addSchools(schools);
				break;
			case 2:
				viewAllSchools(schools);
				break;
			case 3:
				deleteSchools(schools);
				break;
			case 4:
				deleteParent(users); // Call the method to delete parent/guardian
				break;
			case 5:
				System.out.println("Logging out from admin account.");
				return;
			default:
				System.out.println("Invalid option. Please try again.");
			}
		}
	}

	private static void vendorMenu(List<Vendor> vendors) {
		while (true) {
			System.out.println("Vendor Menu:");
			System.out.println("1. Add Menu");
			System.out.println("2. View All Menus");
			System.out.println("3. Delete Menu");
			System.out.println("4. Logout");
			int choice = Helper.readInt("Please choose an option:");

			switch (choice) {
			case 1:
				addMenu(menu);
				break;
			case 2:
				viewAllMenus(menu);
				break;
			case 3:
				deleteMenu(menu);
				break;
			case 4:
				System.out.println("Logging out from vendor account.");
				return;
			default:
				System.out.println("Invalid option. Please try again.");
			}
		}
	}

	private static void addSchools(List<School> schools) {
		String name = Helper.readString("Enter school name:");
		String distributionRange = Helper.readString("Enter distribution range:");
		String schoolContactPerson = Helper
				.readString("Enter contact person name (for holding delivered items till student collects item):");
		int schoolMobile = Helper.readInt("Enter contact person mobile:");
		School school = new School(name, distributionRange, schoolContactPerson, schoolMobile);
		schools.add(school);
		System.out.println("School added successfully!");
	}

	private static void viewAllSchools(List<School> schools) {
		System.out.println("List of Schools:");
		for (School school : schools) {
			System.out.println("School Name: " + school.getName());
			System.out.println("Distribution Range: " + school.getDistributionRange());
			System.out.println("Contact Person (Holds delivered food): " + school.getContactPersonName());
			System.out.println("Contact Person Mobile: " + school.getSchoolMobile());
			System.out.println();
		}
	}

	private static void deleteSchools(List<School> schools) {
		viewAllSchools(schools);
		String nameToDelete = Helper.readString("Enter the name of the school to delete:");
		School schoolToDelete = null;
		for (School school : schools) {
			if (school.getName().equalsIgnoreCase(nameToDelete)) {
				schoolToDelete = school;
				break;
			}
		}
		if (schoolToDelete != null) {
			schools.remove(schoolToDelete);
			System.out.println("School deleted successfully!");
		} else {
			System.out.println("School not found.");
		}
	}

	// delete parent
	private static void deleteParent(List<User> users) {
		String usernameToDelete = Helper.readString("Enter the username of the parent/guardian to delete:");
		User parentToDelete = null;
		for (User user : users) {
			if (user instanceof Parent && user.getUsername().equalsIgnoreCase(usernameToDelete)) {
				parentToDelete = user;
				break;
			}
		}
		if (parentToDelete != null) {
			users.remove(parentToDelete);
			System.out.println("Parent/guardian deleted successfully!");
		} else {
			System.out.println("Parent/guardian not found.");
		}
	}

	/*
	 * private static void addMenu(List<Menu> menu) { String name =
	 * Helper.readString("Enter menu name:"); String menuStarter =
	 * Helper.readString("Enter menu starter:"); String menuMaincourse =
	 * Helper.readString("Enter menu main course:"); String menuDessert =
	 * Helper.readString("Enter menu dessert:"); String description =
	 * Helper.readString("Enter description:"); String dietaryInfo =
	 * Helper.readString("Enter dietary type (Vegan/Vegetarian/Gluten-free):");
	 * double price = Helper.readDouble("Enter price:"); menus.add(menu);
	 * System.out.println("Menu added successfully!"); }
	 * 
	 * private static void viewAllMenus(List<Menu> menus) {
	 * System.out.println("List of Menus:"); for (Menu menu : menus) {
	 * System.out.println("Menu Name: " + menu.getName());
	 * System.out.println("Menu starter: " + menu.getMenuStarter());
	 * System.out.println("Menu main: " + menu.getMenuMain());
	 * System.out.println("Menu dessert: " + menu.getMenuDessert());
	 * System.out.println("Menu description: " + menu.getMenuDescription());
	 * System.out.println("Menu dietary info: " + menu.getMenuDietaryInfo());
	 * System.out.println("Menu price: " + menu.getMenuPrice());
	 * System.out.println(); } }
	 * 
	 * private static void deleteMenu(List<Menu> menus) { viewAllMenus(menus);
	 * String menuToDelete = Helper.readString("Enter the name of menu to delete:");
	 * School schoolToDelete = null; for (Menu menu : menus) { if
	 * (menu.getName().equalsIgnoreCase(menuToDelete)) { menuToDelete = menu; break;
	 * } }
	 */

	// Additional code for demonstrating functionalities
	private static void demonstrateFunctionalities() {
		// Create instances of Parent and Vendor objects
		Parent parent1 = new Parent("P001", "parent1", "password123", "parent1@example.com", "Parent One", "98765432",
				"123 Parent Street", "Parent", new ArrayList<>(), new ArrayList<>(), "");
		Vendor vendor1 = new Vendor("V001", "vendor1", "password456", "vendor1@example.com", "Vendor One", "87654321",
				"456 Vendor Road", "Vendor");

		// display registered parents in a table
		// Inside your main method after adding parents to the users ArrayList
		// Assuming 'users' is the ArrayList containing User objects

		System.out.println(
				"--------------------------------------------------------------------------------------------");
		System.out.printf("| %-8s | %-15s | %-15s | %-15s | %-18s |\n", "User ID", "Full Name", "Username",
				"Phone Number", "Dietary Restr.");
		System.out.println(
				"--------------------------------------------------------------------------------------------");

		for (User user : users) {
			if (user instanceof Parent) {
				Parent parent = (Parent) user;
				System.out.printf("| %-8s | %-15s | %-15s | %-15s | %-18s |\n", parent.getUserID(),
						parent.getFullName(), parent.getUsername(), parent.getPhoneNo(),
						parent.getDietaryRestrictions());
				System.out.println(
						"--------------------------------------------------------------------------------------------");
			}
		}

		// Set additional attributes for Parent and Vendor objects
		List<Integer> childrenIds = new ArrayList<>();
		childrenIds.add(1);
		childrenIds.add(2);
		parent1.setChildrenIds(childrenIds);

		List<String> allergies = new ArrayList<>();
		allergies.add("Peanuts");
		allergies.add("Lactose");
		parent1.setAllergies(allergies);

		String dietaryRestrictions = "Vegetarian";
		parent1.setDietaryRestrictions(dietaryRestrictions);

		ArrayList<Menu> dailyMenus = new ArrayList<>();
		Menu menu1 = new Menu("Menu1", "Delicious menu for Monday", 5.99);
		Menu menu2 = new Menu("Menu2", "Special menu for Tuesday", 6.99);
		dailyMenus.add(menu1);
		dailyMenus.add(menu2);
		vendor1.setDailyMenus(dailyMenus);

		String contactInformation = "Phone: 98765432, Email: vendor1@example.com";
		vendor1.setContactInformation(contactInformation);

		// Demonstrate some functionalities
		// For example, print the parent's children IDs and dietary restrictions
		System.out.println("Parent's Children IDs: " + parent1.getChildrenIds());
		System.out.println("Parent's Dietary Restrictions: " + parent1.getDietaryRestrictions());

		// Print the vendor's daily menus
		List<Menu> vendorMenus = vendor1.getDailyMenus();
		for (Menu menu : vendorMenus) {
			System.out.println("Menu Name: " + menu.getItemName());
			System.out.println("Description: " + menu.getDescription());
			System.out.println("Price: " + menu.getPrices());
		}
	}
}
